// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Game
#include <Game.h>
#endif
#ifndef INCLUDED_Move
#include <Move.h>
#endif
#ifndef INCLUDED_Result
#include <Result.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_06656d10659518da_6_new,"Game","new",0x79ba3204,"Game.new","Main.hx",6,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_06656d10659518da_7_start,"Game","start",0xed088706,"Game.start","Main.hx",7,0x087e5c05)

void Game_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_06656d10659518da_6_new)
            	}

Dynamic Game_obj::__CreateEmpty() { return new Game_obj; }

void *Game_obj::_hx_vtable = 0;

Dynamic Game_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Game_obj > _hx_result = new Game_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Game_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2f382012;
}

void Game_obj::start( ::Move move){
            	HX_STACKFRAME(&_hx_pos_06656d10659518da_7_start)
HXLINE(   9)		 ::Dynamic playerA =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("move",11,e3,60,48),move)
            			->setFixed(1,HX_("name",4b,72,ff,48),HX_("Simon",d6,a3,fc,0f)));
HXLINE(  10)		hx::Class e = hx::ClassOf< ::Move >();
HXDLIN(  10)		 ::Move playerB;
HXDLIN(  10)		if (hx::IsNotNull( e )) {
HXLINE(  10)			::Array< ::Dynamic> arr = ::Type_obj::allEnums(e);
HXDLIN(  10)			bool playerB1;
HXDLIN(  10)			if (hx::IsNotNull( arr )) {
HXLINE(  10)				playerB1 = (arr->length > 0);
            			}
            			else {
HXLINE(  10)				playerB1 = false;
            			}
HXDLIN(  10)			if (playerB1) {
HXLINE(  10)				playerB = arr->__get(::Math_obj::floor((( (Float)(((arr->length - 1) + 1)) ) * ::Math_obj::random()))).StaticCast<  ::Move >();
            			}
            			else {
HXLINE(  10)				playerB = null();
            			}
            		}
            		else {
HXLINE(  10)			playerB = null();
            		}
HXDLIN(  10)		 ::Dynamic playerB2 =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("move",11,e3,60,48),playerB)
            			->setFixed(1,HX_("name",4b,72,ff,48),HX_("Nicolas",f7,76,5f,f1)));
HXLINE(  13)		 ::Result result;
HXDLIN(  13)		 ::Move _g = playerB2->__Field(HX_("move",11,e3,60,48),hx::paccDynamic);
HXDLIN(  13)		switch((int)( ::Dynamic(playerA->__Field(HX_("move",11,e3,60,48),hx::paccDynamic)).StaticCast< ::hx::EnumBase >()->_hx_getIndex())){
            			case (int)0: {
HXLINE(  13)				if (hx::IsNull( _g )) {
HXLINE(  13)					result = ::Result_obj::Draw_dyn();
            				}
            				else {
HXLINE(  13)					switch((int)(_g->_hx_getIndex())){
            						case (int)1: {
HXLINE(  13)							result = ::Result_obj::Winner(playerB2);
            						}
            						break;
            						case (int)2: {
HXLINE(  13)							result = ::Result_obj::Winner(playerA);
            						}
            						break;
            						default:{
HXLINE(  13)							result = ::Result_obj::Draw_dyn();
            						}
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXLINE(  13)				if (hx::IsNull( _g )) {
HXLINE(  13)					result = ::Result_obj::Draw_dyn();
            				}
            				else {
HXLINE(  13)					switch((int)(_g->_hx_getIndex())){
            						case (int)0: {
HXLINE(  13)							result = ::Result_obj::Winner(playerA);
            						}
            						break;
            						case (int)2: {
HXLINE(  13)							result = ::Result_obj::Winner(playerB2);
            						}
            						break;
            						default:{
HXLINE(  13)							result = ::Result_obj::Draw_dyn();
            						}
            					}
            				}
            			}
            			break;
            			case (int)2: {
HXLINE(  13)				if (hx::IsNull( _g )) {
HXLINE(  13)					result = ::Result_obj::Draw_dyn();
            				}
            				else {
HXLINE(  13)					switch((int)(_g->_hx_getIndex())){
            						case (int)0: {
HXLINE(  13)							result = ::Result_obj::Winner(playerB2);
            						}
            						break;
            						case (int)1: {
HXLINE(  13)							result = ::Result_obj::Winner(playerA);
            						}
            						break;
            						default:{
HXLINE(  13)							result = ::Result_obj::Draw_dyn();
            						}
            					}
            				}
            			}
            			break;
            		}
HXLINE(  25)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  25)		::String _hx_tmp1 = (HX_("result: ",c3,4c,16,81) + ::Std_obj::string(result));
HXDLIN(  25)		_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("src/Main.hx",9a,7a,30,a1),25,HX_("Game",12,20,38,2f),HX_("start",62,74,0b,84)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,start,(void))


hx::ObjectPtr< Game_obj > Game_obj::__new() {
	hx::ObjectPtr< Game_obj > __this = new Game_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Game_obj > Game_obj::__alloc(hx::Ctx *_hx_ctx) {
	Game_obj *__this = (Game_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Game_obj), false, "Game"));
	*(void **)__this = Game_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Game_obj::Game_obj()
{
}

hx::Val Game_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Game_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Game_obj_sStaticStorageInfo = 0;
#endif

static ::String Game_obj_sMemberFields[] = {
	HX_("start",62,74,0b,84),
	::String(null()) };

hx::Class Game_obj::__mClass;

void Game_obj::__register()
{
	Game_obj _hx_dummy;
	Game_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Game",12,20,38,2f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Game_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Game_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Game_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Game_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

