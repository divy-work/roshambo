// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_fd61cb8e002c8329_100_createEnum,"Type","createEnum",0xd8d56d31,"Type.createEnum","/usr/share/haxe/std/cpp/_std/Type.hx",100,0x978d9ce0)
HX_LOCAL_STACK_FRAME(_hx_pos_fd61cb8e002c8329_168_allEnums,"Type","allEnums",0x86200985,"Type.allEnums","/usr/share/haxe/std/cpp/_std/Type.hx",168,0x978d9ce0)

void Type_obj::__construct() { }

Dynamic Type_obj::__CreateEmpty() { return new Type_obj; }

void *Type_obj::_hx_vtable = 0;

Dynamic Type_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Type_obj > _hx_result = new Type_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Type_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x37e21eda;
}

 ::Dynamic Type_obj::createEnum(hx::Class e,::String constr,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_fd61cb8e002c8329_100_createEnum)
HXDLIN( 100)		return e->ConstructEnum(constr,params);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Type_obj,createEnum,return )

::cpp::VirtualArray Type_obj::allEnums(hx::Class e){
            	HX_STACKFRAME(&_hx_pos_fd61cb8e002c8329_168_allEnums)
HXLINE( 169)		::Array< ::String > names = ( (::Array< ::String >)(e->GetClassFields()) );
HXLINE( 170)		::cpp::VirtualArray enums = ::cpp::VirtualArray_obj::__new();
HXLINE( 171)		{
HXLINE( 171)			int _g = 0;
HXDLIN( 171)			while((_g < names->length)){
HXLINE( 171)				::String name = names->__get(_g);
HXDLIN( 171)				_g = (_g + 1);
HXLINE( 172)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE( 173)					 ::Dynamic result = e->ConstructEnum(name,null());
HXLINE( 174)					if (hx::IsNotNull( result )) {
HXLINE( 175)						enums->push(result);
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass< ::String >() && _hx_e->toString()!=null() ){
            						HX_STACK_BEGIN_CATCH
            						::String invalidArgCount = _hx_e;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXLINE( 178)		return enums;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Type_obj,allEnums,return )


Type_obj::Type_obj()
{
}

bool Type_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"allEnums") ) { outValue = allEnums_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"createEnum") ) { outValue = createEnum_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Type_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Type_obj_sStaticStorageInfo = 0;
#endif

hx::Class Type_obj::__mClass;

static ::String Type_obj_sStaticFields[] = {
	HX_("createEnum",1d,2c,a4,55),
	HX_("allEnums",71,f5,6a,69),
	::String(null())
};

void Type_obj::__register()
{
	Type_obj _hx_dummy;
	Type_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Type",da,1e,e2,37);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Type_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Type_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Type_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Type_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Type_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

