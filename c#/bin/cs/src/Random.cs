// Generated by Haxe 4.0.5

#pragma warning disable 109, 114, 219, 429, 168, 162
public class Random : global::haxe.lang.HxObject {
	
	public Random(global::haxe.lang.EmptyObject empty) {
	}
	
	
	public Random() {
		global::Random.__hx_ctor__Random(this);
	}
	
	
	protected static void __hx_ctor__Random(global::Random __hx_this) {
	}
	
	
	public static bool @bool() {
		return ( global::Math.rand.NextDouble() < 0.5 );
	}
	
	
	public static int @int(int @from, int to) {
		unchecked {
			return ( @from + ((int) (global::System.Math.Floor(((double) (( (( ( to - @from ) + 1 )) * global::Math.rand.NextDouble() )) ))) ) );
		}
	}
	
	
	public static double @float(double @from, double to) {
		return ( @from + ( (( to - @from )) * global::Math.rand.NextDouble() ) );
	}
	
	
	public static string @string(int length, string charactersToUse) {
		unchecked {
			if (( charactersToUse == null )) {
				charactersToUse = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
			}
			
			string str = "";
			{
				int _g = 0;
				int _g1 = length;
				while (( _g < _g1 )) {
					int i = _g++;
					str = global::haxe.lang.Runtime.concat(str, global::haxe.lang.StringExt.charAt(charactersToUse, ((int) (global::System.Math.Floor(((double) (( (( ( charactersToUse.Length - 1 ) + 1 )) * global::Math.rand.NextDouble() )) ))) )));
				}
				
			}
			
			return str;
		}
	}
	
	
	public static global::Date date(global::Date earliest, global::Date latest) {
		double @from = ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (earliest.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) );
		double t = ( @from + ( (( ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (latest.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) ) - @from )) * global::Math.rand.NextDouble() ) );
		return new global::Date(((global::System.DateTime) (global::System.TimeZone.CurrentTimeZone.ToLocalTime(((global::System.DateTime) (new global::System.DateTime(((long) (( ((long) (( t * ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ) + ((long) (global::Date.epochTicks) ) )) ))) ))) ));
	}
	
	
	public static global::haxe.lang.Null<T> fromArray<T>(global::Array<T> arr) {
		unchecked {
			if (( ( arr != null ) && ( arr.length > 0 ) )) {
				return new global::haxe.lang.Null<T>(arr[((int) (global::System.Math.Floor(((double) (( (( ( arr.length - 1 ) + 1 )) * global::Math.rand.NextDouble() )) ))) )], true);
			}
			else {
				return default(global::haxe.lang.Null<T>);
			}
			
		}
	}
	
	
	public static global::Array<T> shuffle<T>(global::Array<T> arr) {
		unchecked {
			if (( arr != null )) {
				int _g = 0;
				int _g1 = arr.length;
				while (( _g < _g1 )) {
					int i = _g++;
					int j = ((int) (global::System.Math.Floor(((double) (( (( ( arr.length - 1 ) + 1 )) * global::Math.rand.NextDouble() )) ))) );
					T a = arr[i];
					T b = arr[j];
					arr[i] = b;
					arr[j] = a;
				}
				
			}
			
			return arr;
		}
	}
	
	
	public static global::haxe.lang.Null<T> fromIterable<T>(object it) {
		unchecked {
			if (( it != null )) {
				global::Array<object> arr = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::Lambda.array<T>(((object) (it) ))) ))) );
				if (( ( arr != null ) && ( arr.length > 0 ) )) {
					return global::haxe.lang.Null<object>.ofDynamic<T>(arr[((int) (global::System.Math.Floor(((double) (( (( ( arr.length - 1 ) + 1 )) * global::Math.rand.NextDouble() )) ))) )]);
				}
				else {
					return default(global::haxe.lang.Null<T>);
				}
				
			}
			else {
				return default(global::haxe.lang.Null<T>);
			}
			
		}
	}
	
	
	public static global::haxe.lang.Null<T> enumConstructor<T>(global::System.Type e) {
		unchecked {
			if ( ! (global::haxe.lang.Runtime.typeEq(e, null)) ) {
				global::Array<object> arr = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::Type.allEnums<T>(((global::System.Type) (e) ))) ))) );
				if (( ( arr != null ) && ( arr.length > 0 ) )) {
					return global::haxe.lang.Null<object>.ofDynamic<T>(arr[((int) (global::System.Math.Floor(((double) (( (( ( arr.length - 1 ) + 1 )) * global::Math.rand.NextDouble() )) ))) )]);
				}
				else {
					return default(global::haxe.lang.Null<T>);
				}
				
			}
			else {
				return default(global::haxe.lang.Null<T>);
			}
			
		}
	}
	
	
}


